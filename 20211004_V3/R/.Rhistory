# Daten einlesen und filtern
df_votes = read_dta("aggregat2.dta")
library(haven)
library(tidyverse)
# Daten einlesen und filtern
df_votes = read_dta("aggregat2.dta")
model = lm(acceptpo ~ suppshare2 + swjalager, data = df_votes)
## schÃ¶ne Tabelle
library(texreg)
# word
htmlreg(model, custom.coef.names = c("Konstante", "Ja-Anteil Ausgaben",
"Ja-Anteil Parteiparolen"),
file = "Regressionstabelle.html")
df_votes = read_dta("aggregat2.dta")
model = lm(acceptpo ~ suppshare2 + swjalager + nationalrat + srf2ja, data = df_votes)
model = lm(acceptpo ~ suppshare2 + swjalager, data = df_votes)
model_1 = lm(acceptpo ~ suppshare2 + swjalager + nationalrat + srf2ja, data = df_votes)
summary(model_1)
model_h1 <- lm(acceptpo ~ srf2ja, data = df_votes)
# get betas
beta = coef(model_h1)
# get s.e.
se = sqrt(diag(vcov(model_h1)))
# 95% confidence interval
lower = beta + se * qt(0.025, summary(model_h1)$df[2])
upper = beta + se * qt(0.025, summary(model_h1)$df[2], lower.tail = FALSE)
cbind(lower, beta, upper)
summary(model_h1)
# Konfidenzinterval direkt berechnen
confint(model1)
# Konfidenzinterval direkt berechnen
confint(model_h1)
# Hypothese 2 "Je mehr Organisationen die Ja Parole zu einer Vorlage beschliessen, desto höher der Ja Anteil an der Urne."
model_h2 <- lm(acceptpo ~ swjalager, data = df_votes)
confint(model_h2)
clear
### Übung 2
# Hypothese 1 "Je höher der Ja Anteil bei der zweiten SRF Umfrage, desto höher der Ja Anteil an der Urne"
model_h1 <- lm(acceptpo ~ srf2ja, data = df_votes)
confint(model_h1)
# Hypothese 2 "Je mehr Organisationen die Ja Parole zu einer Vorlage beschliessen, desto höher der Ja Anteil an der Urne."
model_h2 <- lm(acceptpo ~ swjalager, data = df_votes)
confint(model_h2)
df_votes_narm <- df_votes %>% filter(!is.na(suppshare2) & !is.na(swjalager) & !is.na(nationalrat) & !is.na(srf2ja))
View(df_votes_narm)
View(df_votes_narm)
rm(df_votes_narm)
coef(model_1)[-1] * colMeans(model_1.frame(model_1))[-1]
coef(model)[-1] * colMeans(model.frame(model))[-1]
coef(model_1)[-1] * colMeans(model.frame(model_1))[-1]
# Maximale Änderung
coef(model_1)[-1] * diff(apply(model.frame(model_1), 2, range))[-1]
# Standartisierter Koeffizient
library(QuantPsyc)
lm.beta(model_1)
### Übung 4- 7
# Durchschnittlicher Effekt
coef(model_1)[-1] * colMeans(model.frame(model_1))[-1]
# Maximale Änderung
coef(model_1)[-1] * diff(apply(model.frame(model_1), 2, range))[-1]
lm.beta(model_1)
# Anteil der erklärten Varianz
library(relaimpo)
calc.relimp(model_1, type = "lmg", rela = TRUE)
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::check_installed()
knitr::opts_chunk$set(echo = TRUE)
```{r, echo=FALSE, message=FALSE}
texreg(model_1, custom.coef.names = c("Konstante", "Ausgaben für Inserate JA Lager","Anteil Parteien, welche die JA Parole beschlossen haben","Anteil JA Schlussabstimmung im Nationalrat","Anteil JA zweite Welle SRF Umfrage"))
texreg(model_1, custom.coef.names = c("Konstante", "Ausgaben für Inserate JA Lager","Anteil Parteien, welche die JA Parole beschlossen haben","Anteil JA Schlussabstimmung im Nationalrat","Anteil JA zweite Welle SRF Umfrage"))
df_votes_nrwm <- df_votes %>% select(acceptpo, suppshare2, swjalager, nationalrat, srf2ja) %>% na.ommit()
df_votes_nrwm <- df_votes %>%
select(acceptpo, suppshare2, swjalager, nationalrat, srf2ja) %>%
na.ommit()
# Aufgabe 2
library(haven)
library(tidyverse)
df_votes = read_dta("aggregat2.dta")
model = lm(acceptpo ~ suppshare2 + swjalager + nationalrat + srf2ja,
data = df_votes)
summary(model)
# Aufgabe 3 (Beispiel mit srf2ja)
df_votes = df_votes %>%
select(acceptpo, suppshare2, swjalager, nationalrat, srf2ja) %>%
na.omit()
model_kontrollvariablen = lm(acceptpo ~ suppshare2 + swjalager + nationalrat, data = df_votes)
model_hauptvariable = lm(srf2ja ~ suppshare2 + swjalager + nationalrat,
data = df_votes)
u = residuals(model_kontrollvariablen)
v = residuals(model_hauptvariable)
model_alles = lm(u ~ v)
summary(model_alles)
model = lm(acceptpo ~ suppshare2 + swjalager + nationalrat + srf2ja,
data = df_votes)
summary(model)
df_votes = read_dta("aggregat2.dta")
model = lm(acceptpo ~ suppshare2 + swjalager + nationalrat + srf2ja,
data = df_votes)
# Aufgabe 4
coef(model)[-1] * colMeans(model.frame(model))[-1]
